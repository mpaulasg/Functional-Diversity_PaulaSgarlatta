xy<-pairs_axes[[a]]
# background with axes range set + title
ggplot_a<-background.plot(range_faxes=range_axes,
faxes_nm=paste0("PC", xy),
color_bg="grey95")
# convex hull of species pool
ggplot_a<-pool.plot(ggplot_bg=ggplot_a,
sp_coord2D=pool_coord[,xy],
vertices_nD=pool_vert_nm,
plot_pool=FALSE,
color_ch=NA, fill_ch="white", alpha_ch=1)
# loop on habitats
for (b in row.names(hab_sp_occ) ) {
# color given habitat
col_b<-as.character(hab_colors[b])
# species present in v
sp_b<-names(which(hab_multidimFD$details$asb_sp_occ[b,]==1))
# plot convex hull of assemblage but not species
ggplot_a<-fric.plot( ggplot_bg=ggplot_a,
asb_sp_coord2D=list(vv=pool_coord[sp_b,xy]),
asb_vertices_nD=list(vv=hab_multidimFD$details$asb_vert_nm[[b]]),
plot_sp = FALSE,
color_ch = c(vv=col_b),
fill_ch= c(vv=col_b),
alpha_ch = c(vv=0.1))
}# end of a
# legend
if (a==1) {
nlabels_b <- length(hab_colors)
ggplot_a <- ggplot_a +
geom_text(aes(x = rep(range_axes[1]*0.9, nlabels_b ),
y = range_axes[2]*(1.05-0.15*(1:nlabels_b)),
label = names(hab_colors),
color = hab_colors ),
hjust = "left",
show.legend = FALSE) +
ggtitle("Spatial")
}
# ggplot stored in list
ggplot_spatial[[a]] <- ggplot_a
}# end of z
## merging all plots into a single figure and saving as png ####
figure3 <- ( ggplot_temporal_nokelp[[1]] +  ggplot_temporal_kelp[[1]] + ggplot_spatial[[1]] ) / (
ggplot_temporal_nokelp[[2]] +  ggplot_temporal_kelp[[2]] + ggplot_spatial[[2]])
ggplot_spatial[[1]]
ggplot_spatial[[2]]
## merging all plots into a single figure and saving as png ####
figure3 <- ( ggplot_temporal_nokelp[[1]] +  ggplot_temporal_kelp[[1]] + ggplot_spatial[[1]] ) / (
ggplot_temporal_nokelp[[2]] +  ggplot_temporal_kelp[[2]] + ggplot_spatial[[2]])
figure3
# color code for the 3 habitats
hab_colors <- c(Inshore="gold1", Midshelf="red2", Offshore="blue3")
nlabels_b <- length(hab_colors)
ggplot_a <- ggplot_a +
geom_text(aes(x = rep(range_axes[1]*0.9, nlabels_b ),
y = range_axes[2]*(1.05-0.15*(1:nlabels_b)),
label = names(hab_colors),
color = hab_colors ),
hjust = "left",
show.legend = FALSE) +
ggtitle("Spatial")
# ggplot stored in list
ggplot_spatial[[a]] <- ggplot_a
ggplot_spatial[[1]]
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 139 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 139 species
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces$quality_fspaces
funct_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
funct_space
ggsave(funct_space, file=here::here("outputs/", "figure1_SM.png"),
height = 16, width = 24, unit = "cm" )
ggsave(funct_space, file=here::here("outputs/", "figure1_SM.png"),
height = 16, width = 30, unit = "cm" )
# species coordinates
sp_3D_coord<-funct_spaces$details_fspaces$sp_pc_coord[,1:3]
summary(sp_3D_coord)
sp_faxes_coord <- funct_spaces$"details_fspaces"$"sp_pc_coord"
# test correlation between traits and axes:
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
cor_tr_faxes$tr_faxes_stat
cor_tr_faxes$tr_faxes_plot
plot_corr <- cor_tr_faxes$tr_faxes_plot
ggsave(plot_corr, file=here::here("outputs/", "figure2_SM.png"),
height = 16, width = 30, unit = "cm" )
thermal <- read.csv(here::here("data", "raw_data", "thermal_all.csv")) %>%
mutate(thermal_label= if_else(thermal>"23", "tropical", "temperate")) %>%
#column_to_rownames("Species") %>%
select(-thermal)
sp_faxes_coord <- as.data.frame(sp_faxes_coord) %>%
rownames_to_column("Species")
sp_faxes_coord <- inner_join(sp_faxes_coord, thermal,
by="Species") %>%
column_to_rownames("Species") %>%
as.matrix()
big_plot <- mFD::funct.space.plot(sp_faxes_coord  = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
faxes = c("PC1", "PC2", "PC3"), name_file = NULL,
faxes_nm = NULL, range_faxes = c(NA, NA),
color_bg = "grey95",
color_pool = "darkgreen", fill_pool = "white",
shape_pool = 21, size_pool = 1,
plot_ch = TRUE, color_ch = "black",
fill_ch = "white", alpha_ch = 0.3,
plot_vertices = TRUE,
color_vert = "blueviolet",
fill_vert = "blueviolet", shape_vert = 23,
size_vert = 1,
plot_sp_nm = NULL, nm_size = 3,
nm_color = "black",
nm_fontface = "plain",
check_input = TRUE)
sp_faxes_coord <- funct_spaces$"details_fspaces"$"sp_pc_coord"
big_plot <- mFD::funct.space.plot(sp_faxes_coord  = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
faxes = c("PC1", "PC2", "PC3"), name_file = NULL,
faxes_nm = NULL, range_faxes = c(NA, NA),
color_bg = "grey95",
color_pool = "darkgreen", fill_pool = "white",
shape_pool = 21, size_pool = 1,
plot_ch = TRUE, color_ch = "black",
fill_ch = "white", alpha_ch = 0.3,
plot_vertices = TRUE,
color_vert = "blueviolet",
fill_vert = "blueviolet", shape_vert = 23,
size_vert = 1,
plot_sp_nm = NULL, nm_size = 3,
nm_color = "black",
nm_fontface = "plain",
check_input = TRUE)
# Plot the graph with all pairs of axes:
big_plot$patchwork
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
ggsave(qual_space, file=here::here("outputs/", "figure1_SM.png"),
height = 16, width = 30, unit = "cm" )
# Plot the graph with all pairs of axes:
func_space <- big_plot$patchwork
ggsave(func_space, file=here::here("outputs/", "figure3_SM.png"),
height = 16, width = 30, unit = "cm" )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 139 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 139 species
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(betapart)
# loading data
load(here::here("data", "kelp_sp_occ.RData") )
load(here::here("data", "nokelp_sp_occ.RData") )
load(here::here("outputs", "sp_3D_coord.RData") )
# number of species, functional richness, dispersion and identity (along 3 axes)
temporal_fd_nokelp <- mFD::alpha.fd.multidim(
sp_faxes_coord   = sp_3D_coord,
asb_sp_w         = nokelp_sp_occ,
ind_vect         = c("fide", "fric", "fdis", "fspe"),
scaling          = TRUE,
check_input      = TRUE,
details_returned = TRUE)
View(kelp_sp_occ)
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
# loading raw data from csv----
nokelp_metadata <- read.csv(here::here("from_paula", "TemporalBRUV_species_metadata_no_kelp.csv"))
head(nokelp_metadata)
nokelp_replicates_maxN <- read.csv(here::here("from_paula", "TemporalBRUV_species_maxN_no_kelp.csv"))
head(nokelp_replicates_maxN)
View(nokelp_replicates_maxN)
nokelp_sites_maxN <- nokelp %>%
pivot_longer(cols= contains("_"), names_to="species") %>%
mutate(value=as.numeric(value))
# merging metadata and data
nokelp <- left_join(nokelp_metadata, nokelp_replicates_maxN, by=c("Code"="Site") )
View(nokelp)
nokelp_sites_maxN <- nokelp %>%
pivot_longer(cols= contains("_"), names_to="species") %>%
mutate(value=as.numeric(value))
View(nokelp_sites_maxN)
View(nokelp)
nokelp_sites_maxN <- nokelp %>%
pivot_longer(cols= contains("_"), names_to="species") %>%
mutate(value=as.numeric(value)) %>%
group_by(Site, Year, species)
nokelp_sites_maxN <- nokelp %>%
pivot_longer(cols= contains("_"), names_to="species") %>%
mutate(value=as.numeric(value)) %>%
group_by(Site, Year, species) %>%
summarize(total=sum(value))
rm(list=ls()) # cleaning memory
# libraries
library(reshape2)
library(tidyverse)
library(mFD)
# loading data
load(here::here("outputs", "temporal_alpha_nokelp.RData") )
load(here::here("outputs", "temporal_alpha_kelp.RData") )
fide3_nokelp <- temporal_alpha_nokelp %>%
select(fide_PC1,     fide_PC2, fide_PC3)
shift3D_nokelp_eucl <- dist(fide3_nokelp, method = "euclidean")
shift3D_nokelp_eucl_1 <- dist.to.df( list(shift3D=shift3D_nokelp_eucl) ) %>%
as.data.frame() %>%
mutate(Site1=sub("_.*", "", x1), Site2=sub("_.*", "", x2),
Year1=sub(".*_", "", x1),  Year2=sub(".*_", "", x2))
df_shift3D_nokelp_toplot <- shift3D_nokelp_eucl_1 %>%
filter(Year1==2002 | Year2==2002) %>%
filter(Site1 == Site2) %>%
mutate(Year = pmax ( Year1, Year2 ) ) %>%
select(Year, shift3D)  %>%
group_by(Year) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = "No_Kelp", .before="Year" )
fide3_kelp <- temporal_alpha_kelp %>%
select(fide_PC1,     fide_PC2, fide_PC3)
shift3D_kelp_eucl <- dist(fide3_kelp, method = "euclidean")
shift3D_kelp_eucl_1 <- dist.to.df( list(shift3D=shift3D_kelp_eucl) ) %>%
as.data.frame() %>%
mutate(Site1=sub("_.*", "", x1), Site2=sub("_.*", "", x2),
Year1=sub(".*_", "", x1),  Year2=sub(".*_", "", x2))
df_shift3D_kelp_toplot <- shift3D_kelp_eucl_1 %>%
filter(Year1==2002 | Year2==2002) %>%
filter(Site1 == Site2) %>%
mutate(Year = pmax ( Year1, Year2 ) ) %>%
select(Year, shift3D)  %>%
group_by(Year) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = "Kelp", .before="Year" )
df_shift3D <- bind_rows(df_shift3D_nokelp_toplot,
df_shift3D_kelp_toplot)
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors) +
scale_fill_manual(values=hab_colors) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
View(fide3_nokelp)
View(shift3D_kelp_eucl_1)
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(patchwork)
# loading data
load(here::here("data", "spatial_metadata.RData") )
load(here::here("outputs/", "spatial_alpha.RData") )
load(here::here("data", "kelp_metadata.RData") )
load(here::here("data", "nokelp_metadata.RData") )
load(here::here("outputs/", "temporal_alpha_kelp.RData") )
load(here::here("outputs/", "temporal_alpha_nokelp.RData") )
View(spatial_alpha)
spatial_fspe <- spatial_metadata %>%
left_join( rownames_to_column(spatial_alpha, "Code"), by="Code" ) %>%
select(Code, Habitat, fspe)
View(spatial_fspe)
spatial_toplot <- spatial_fspe %>%
group_by(Habitat) %>%
summarise(
n = n(),
fspe_mean = mean(fspe),
fspe_sd = sd(fspe)
) %>%
mutate( fspe_se = fspe_sd/sqrt(n))
spatial_toplot
# color code for the 3 habitats
hab_colors <- c(Inshore= "#2C6BAA", Midshelf= "lightsalmon1", Offshore="firebrick3")
plot_spatial_taxo <- ggplot(spatial_toplot) +
geom_bar( aes(x=Habitat, y=fspe_mean, color = Habitat, fill = Habitat), stat="identity", color = "black", size=0.8) +
geom_errorbar( aes(x=Habitat, ymin=fspe_mean-fspe_se, ymax=fspe_mean+fspe_se), width=0.1, size=0.8, colour="black" ) +
scale_color_manual(values=hab_colors) +
scale_fill_manual(values=hab_colors) +
scale_y_continuous( limits = c(0,25), breaks = seq(from=0, to=35, by=5)  ) +
labs(x="", y="Functional specialization") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.position = "none", axis.text.x = element_blank())
plot_spatial_taxo
plot_spatial_taxo <- ggplot(spatial_toplot) +
geom_bar( aes(x=Habitat, y=fspe_mean, color = Habitat, fill = Habitat), stat="identity", color = "black", size=0.8) +
geom_errorbar( aes(x=Habitat, ymin=fspe_mean-fspe_se, ymax=fspe_mean+fspe_se), width=0.1, size=0.8, colour="black" ) +
scale_color_manual(values=hab_colors) +
scale_fill_manual(values=hab_colors) +
scale_y_continuous( limits = c(0, 0.8), breaks = seq(from=0, to=0.8, by=0.2)  ) +
labs(x="", y="Functional specialization") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.position = "none", axis.text.x = element_blank())
plot_spatial_taxo
temporal_kelp<- kelp_metadata %>%
mutate(Habitat="kelp") %>%
left_join( rownames_to_column(temporal_alpha_kelp, "Code"), by="Code" ) %>%
select(Code, Site, Year, Habitat, fspe)
temporal_nokelp<- nokelp_metadata %>%
mutate(Habitat="no_kelp") %>%
left_join( rownames_to_column(temporal_alpha_nokelp, "Code"), by="Code" ) %>%
select(Code, Site, Year, Habitat, fspe)
# merging values for the 2 habitat types
temporal_all <- bind_rows(temporal_kelp, temporal_nokelp )
head(temporal_all)
# mean and sd of diversity among each site for each year in each habitat type
temporal_toplot <- temporal_all %>%
group_by(Year, Habitat) %>%
summarise(
n = n(),
fspe_mean = mean(fspe),
fspe_sd = sd(fspe)
) %>%
mutate( fspe_se = fspe_sd/sqrt(n))
temporal_toplot
unique(temporal_toplot$Year)
year_colors <- c(kelp= "seagreen4", no_kelp= "seagreen2")
plot_tempo_fspe <- ggplot(temporal_toplot,
mapping=aes(color = Habitat, fill = Habitat) ) +
geom_point( aes(x=Year, y=fspe_mean), stat="identity", size=3) +
geom_line(aes(x= Year, y= fspe_mean) , stat="identity", size=1)+
geom_errorbar( aes(x=Year, ymin=fspe_mean-fspe_se, ymax=fspe_mean+fspe_se), width=0.4, size=0.8) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.8), breaks = seq(from=0, to=0.8, by=0.2)  ) +
scale_color_manual(values=year_colors) +
scale_fill_manual(values=year_colors) +
labs(x="", y="Functional specialization") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.position = "none")
plot_tempo_fspe
plot_tempo_fspe <- ggplot(temporal_toplot,
mapping=aes(color = Habitat, fill = Habitat) ) +
geom_point( aes(x=Year, y=fspe_mean), stat="identity", size=3) +
geom_line(aes(x= Year, y= fspe_mean) , stat="identity", size=1)+
geom_errorbar( aes(x=Year, ymin=fspe_mean-fspe_se, ymax=fspe_mean+fspe_se), width=0.4, size=0.8) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0.4,0.8), breaks = seq(from=0.4, to=0.8, by=0.2)  ) +
scale_color_manual(values=year_colors) +
scale_fill_manual(values=year_colors) +
labs(x="", y="Functional specialization") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.position = "none")
plot_tempo_fspe
## merging all plot into a single figure and saving as png ####
figure6 <- ( plot_spatial_fspe + plot_tempo_fspe )
plot_spatial_fspe <- ggplot(spatial_toplot) +
geom_bar( aes(x=Habitat, y=fspe_mean, color = Habitat, fill = Habitat), stat="identity", color = "black", size=0.8) +
geom_errorbar( aes(x=Habitat, ymin=fspe_mean-fspe_se, ymax=fspe_mean+fspe_se), width=0.1, size=0.8, colour="black" ) +
scale_color_manual(values=hab_colors) +
scale_fill_manual(values=hab_colors) +
scale_y_continuous( limits = c(0, 0.8), breaks = seq(from=0, to=0.8, by=0.2)  ) +
labs(x="", y="Functional specialization") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.position = "none", axis.text.x = element_blank())
plot_spatial_fspe
## merging all plot into a single figure and saving as png ####
figure6 <- ( plot_spatial_fspe + plot_tempo_fspe )
ggsave(figure6, file=here::here("outputs/", "figure6_fspe.png"),
height = 22, width = 25, unit = "cm" )
## merging all plot into a single figure and saving as png ####
figure6 <- ( plot_spatial_fspe + plot_tempo_fspe )
ggsave(figure6, file=here::here("outputs/", "figure6_fspe.png"),
height = 22, width = 30, unit = "cm" )
