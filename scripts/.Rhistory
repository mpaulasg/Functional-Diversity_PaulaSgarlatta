group_by(Habitat2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
)
df_shift3D_space_toplot <- shift3D_space_eucl_1 %>%
filter(Habitat1=="I" | Habitat2=="I") %>%
filter(Habitat2 == "M"| Habitat2 == "O") %>%
group_by(Habitat2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = Habitat1) %>%
mutate( Year = 2013, .before="Year" )
df_shift3D_space_toplot <- shift3D_space_eucl_1 %>%
filter(Habitat1=="I" | Habitat2=="I") %>%
filter(Habitat2 == "M"| Habitat2 == "O") %>%
group_by(Habitat2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = Habitat2) %>%
mutate( Year = 2013, .before="Year" )
df_shift3D_space_toplot <- shift3D_space_eucl_1 %>%
filter(Habitat1=="I" | Habitat2=="I") %>%
filter(Habitat2 == "M"| Habitat2 == "O") %>%
group_by(Habitat2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = Habitat2) %>%
select(-Habitat2) %>%
mutate( Year = 2013, .before="Year" )
df_shift3D_space_toplot$Year <- as.character(df_shift3D_space_toplot$Year)
df_shift3D <- bind_rows(df_shift3D_nokelp_toplot,
df_shift3D_kelp_toplot, df_shift3D_space_toplot)
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8",
#I_M="#2C6BAA",
M="lightsalmon1", O="firebrick3")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors,name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_fill_manual(values=hab_colors, name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8",
I_M="#2C6BAA", I_O="lightsalmon1", M_O="firebrick3")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors,name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_fill_manual(values=hab_colors, name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8",
I_M="#2C6BAA", I_O="lightsalmon1", M_O="firebrick3")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors,name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_fill_manual(values=hab_colors, name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
df_shift3D_space_toplot <- shift3D_space_eucl_1 %>%
group_by(Site1, Site2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
ungroup(Site1, Site2) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = paste(Site1, Site2, sep="_"), .before="Site1" ) %>%
select(-Site1, -Site2) %>%
mutate( Year = 2013, .before="Year" ) %>%
filter(Habitat %in%c("I_M", "I_O", "M_O") ) %>%
droplevels("Habitat")
df_shift3D_space_toplot$Year <- as.character(df_shift3D_space_toplot$Year)
df_shift3D <- bind_rows(df_shift3D_nokelp_toplot,
df_shift3D_kelp_toplot, df_shift3D_space_toplot)
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8",
I_M="#2C6BAA", I_O="lightsalmon1", M_O="firebrick3")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors,name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_fill_manual(values=hab_colors, name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
View(df_shift3D)
df_shift3D <- bind_rows(df_shift3D_nokelp_toplot,
df_shift3D_kelp_toplot, df_shift3D_space_toplot)
shift3D_space_eucl_1 <- dist.to.df( list(shift3D=shift3D_space_eucl) ) %>%
as.data.frame() %>%
mutate(Site1=sub(".*_", "", x1), Site2=sub(".*_", "", x2))
df_shift3D_space_toplot <- shift3D_space_eucl_1 %>%
group_by(Site1, Site2) %>%
summarise( n = n(),
shift3D_mean = mean(shift3D),
shift3D_sd = sd(shift3D)
) %>%
ungroup(Site1, Site2) %>%
mutate(shift3D_se = shift3D_sd/sqrt(n))  %>%
mutate( Habitat = paste(Site1, Site2, sep="_"), .before="Site1" ) %>%
select(-Site1, -Site2) %>%
mutate( Year = 2013, .before="Year" ) %>%
filter(Habitat %in%c("I_M", "I_O", "M_O") ) %>%
droplevels("Habitat")
View(df_shift3D_space_toplot)
df_shift3D_space_toplot$Year <- as.character(df_shift3D_space_toplot$Year)
df_shift3D <- bind_rows(df_shift3D_nokelp_toplot,
df_shift3D_kelp_toplot, df_shift3D_space_toplot)
# color code for the 3 habitats
hab_colors <- c(Kelp="#3BB372", No_Kelp="#74E7B8",
I_M="#2C6BAA", I_O="lightsalmon1", M_O="firebrick3")
df_shift3D$Year <- as.numeric(df_shift3D$Year)
plot_shift3D <- ggplot(df_shift3D, mapping = aes(color=Habitat)) +
geom_point( aes( x=Year, y= shift3D_mean), stat="identity", size=2) +
geom_line( aes( x=Year, y= shift3D_mean), stat="identity", size=1) +
geom_errorbar( aes(x=Year, ymin= shift3D_mean - shift3D_se, ymax= shift3D_mean + shift3D_se),
width=0.2, size=1 ) +
scale_color_manual(values=hab_colors,name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_fill_manual(values=hab_colors, name="Habitat", breaks = c("Kelp", "No_Kelp", "I_M", "I_O", "M_O"),
labels=c("Kelp", "No kelp", "Inshore-Midshelf", "Inshore-Offshore", "Midshelf-Offshore")) +
scale_x_continuous( limits = c(2001, 2019), breaks = seq(from=2002, to=2018, by=4)  ) +
scale_y_continuous( limits = c(0,0.1), breaks = seq(from=0, to=0.1, by=0.02)  ) +
labs(x="", y="Shift in Functional Identity") +
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (14),colour = "black"), axis.title = element_text(size= (16)),
legend.title = element_text(size=14), legend.text = element_text(size=14),
legend.background = element_blank(), legend.key=element_blank())
plot_shift3D
ggsave(plot_shift3D, file=here::here("outputs/", "Figure4.png"),
height = 20, width = 18, unit = "cm" )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(patchwork)
library(mFD)
# loading data
load(here::here("outputs/", "spatial_fd.RData"))
# loading thermal affinity data:
thermal <- read.csv(here::here("data", "raw_data", "thermal_all.csv")) %>%
mutate(thermal_label= if_else(thermal>"23", "tropical", "temperate")) %>%
#column_to_rownames("Species") %>%
select(-thermal)
# Add thermal aff to sp_faxes_coord:
sp_3D_coord <- spatial_fd$details$sp_faxes_coord
sp_faxes_coord <- as.data.frame(sp_3D_coord) %>%
rownames_to_column("Species")
sp_faxes_coord <- inner_join(sp_faxes_coord, thermal,
by="Species")
# Change class of thermal_affinity column: character to factor:
sp_faxes_coord$thermal_label <- as.factor(sp_faxes_coord$thermal_label)
class(sp_faxes_coord$thermal_label) # ok
asb_sp <- sp_faxes_coord[, c(1, 5)]
asb_sp_new <- asb_sp %>%
add_column(present = as.numeric(1)) %>%
pivot_wider(names_from = thermal_label, values_from = present)
asb_sp_new[is.na(asb_sp_new)] <- as.numeric(0)
asb_sp_new2 <- t(asb_sp_new)
colnames(asb_sp_new2) <- asb_sp_new2[1, ]
asb_sp_new2 <- asb_sp_new2[-1, ]
# create a dataframe that will contain the same values as asb_sp_new2 ...
# ... because (I don't knwo why) I can not convert character into numeric:
asb_sp_new3 <- as.data.frame(matrix(nrow = nrow(asb_sp_new2), ncol = ncol(asb_sp_new2)))#(s)
colnames(asb_sp_new3) <- colnames(asb_sp_new2)
rownames(asb_sp_new3) <- rownames(asb_sp_new2)
for (i in (1:nrow(asb_sp_new3))) {
for (j in (1:ncol(asb_sp_new3))) {
asb_sp_new3[i, j] <- as.numeric(asb_sp_new2[i, j])
}
}
asb_sp_new3 <- as.matrix(asb_sp_new3)
# vertices of all fe in 4D ----
pool_vert_nm <- spatial_fd$details$pool_vert_nm
# range of axes
range_faxes_coord <- range(sp_3D_coord[,1:3])
range_axes <- range_faxes_coord +
c(-1, 1) * (range_faxes_coord[2] - range_faxes_coord[1]) * 0.1
spread_faxes <- range_axes[2] - range_axes[1]
# compute FRic for all habitats  ---
Fric <- alpha.fd.multidim(sp_faxes_coord = sp_3D_coord,
asb_sp_w = asb_sp_new3,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
thermal_aff_colors <- c(tropical = "lightsalmon1", temperate = "#2C6BAA")
# list to store ggplot
ggplot_pc <- list()
# pairs of axes
pairs_axes <- list(c(1,2), c(1,3), c(2, 3))
for (z in 1:length(pairs_axes)) {
# names of axes
xy <- pairs_axes[[z]]
# background with axes range set + title
ggplot_z <- background.plot(range_faxes = range_axes,
faxes_nm = paste0("PC", xy),
color_bg = "grey95")
# convex hull of global species pool
ggplot_z <- pool.plot(ggplot_bg = ggplot_z,
sp_coord2D = sp_3D_coord[,xy],
vertices_nD = pool_vert_nm,
plot_pool = FALSE,
color_ch = "black", fill_ch = "white", alpha_ch = 1)
# species present in trop:
sp_trop <- sp_faxes_coord$Species[which(sp_faxes_coord$thermal_label == "tropical")]
# species present in temp:
sp_temp <- sp_faxes_coord$Species[which(sp_faxes_coord$thermal_label == "temperate")]
# vertices in trop:
vert_trop <- Fric$details$asb_vert_nm$tropical
# vertices in temp:
vert_temp <- Fric$details$asb_vert_nm$temperate
# plot convex hull of assemblage but not species
ggplot_z2 <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = list(asb1 = sp_3D_coord[sp_trop, xy],
asb2 = sp_3D_coord[sp_temp, xy]),
asb_vertices_nD = list(asb1 = vert_trop,
asb2 = vert_temp),
plot_sp = TRUE,
color_sp = thermal_aff_colors,
fill_sp = c(asb1 = "white", asb2 = "white"),
size_sp = c(asb1 = 1, asb2 = 1),
shape_sp = c(asb1 = 16, asb2 = 16),
color_vert = thermal_aff_colors,
fill_vert = thermal_aff_colors,
size_vert = c(asb1 = 4, asb2 = 4),
shape_vert = c(asb1 = 16, asb2 = 16),
alpha_ch = c(asb1 = 0, asb2 = 0),
color_ch = c(asb1 = NA, asb2 = NA),
fill_ch = c(asb1 = NA, asb2 = NA))
# ggplot stored in list
ggplot_pc[[z]] <- ggplot_z2
}# end of z
# plot white basic window:
plot_caption <- ggplot2::ggplot(data.frame(x = range_axes,
y = range_axes),
ggplot2::aes(x = x, y = y)) +
ggplot2::scale_x_continuous(limits = range_axes, expand = c(0, 0)) +
ggplot2::scale_y_continuous(limits = range_axes, expand = c(0, 0)) +
ggplot2::theme_void() + ggplot2::theme(legend.position = "none") +
ggplot2::geom_rect(xmin = range_axes[1], xmax = range_axes[2],
ymin = range_axes[1], ymax = range_axes[2],
fill = "white", colour ="white")
## merging all plots into a single figure and saving as png ####
figure <- panels.to.patchwork(ggplot_pc, plot_caption = plot_caption)
ggsave(figure, file=here::here("outputs/", "Figure5.png"),
height = 16, width = 24, unit = "cm" )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
## loading ####
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 139 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
## preparing trait dataset ####
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 139 species
# recoding variable to match trait type ----
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
#Kmax as numeric
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
### Compute functional spaces and their quality:
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces$quality_fspaces
save(funct_spaces, file=here::here("outputs/", "funct_spaces.RData") )
load(here::here("outputs", "funct_spaces.RData") )
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
qual_space
library(ggplot2)
qual_space_plot <- ggplot(qual_space)
View(qual_space)
qual_space
plot(qual_space)
################################################################################
##
## Script for computing species positions in a multidimensional space
## according to their trait values
##
## Code by Camille Magneville, SÃ©bastien VillÃ©ger and Paula Sgarlatta
##
################################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
## loading ####
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 139 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
## preparing trait dataset ####
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 139 species
# recoding variable to match trait type ----
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
#Kmax as numeric
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
### Compute functional spaces and their quality:
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces$quality_fspaces
# => 3D space has the lowest mAD (0.055)
# species coordinates
sp_3D_coord<-funct_spaces$details_fspaces$sp_pc_coord[,1:3]
summary(sp_3D_coord)
### Test correlation between traits and functional axes:
# retrieve coordinates of species:
sp_faxes_coord <- funct_spaces$"details_fspaces"$"sp_pc_coord"
save(sp_faxes_coord, file=here::here("outputs/", "sp_faxes_coord.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
## loading ####
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("outputs", "sp_tr.RData") )
load(here::here("data", "sp_tr.RData") )
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
cor_tr_faxes$tr_faxes_stat
plot_corr <- cor_tr_faxes$tr_faxes_plot
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
ggsave(qual_space, file=here::here("outputs/", "Figure4S.png"),
height = 16, width = 30, unit = "cm" )
ggsave(plot_corr, file=here::here("outputs/", "Figure5S.png"),
height = 16, width = 30, unit = "cm" )
corr_table <- as.data.frame(cor_tr_faxes$tr_faxes_stat)
View(corr_table)
write.csv(corr_table, file=here::here("outputs/", "Correlation_traits_table.csv"))
write.csv(corr_table, file=here::here("outputs/", "Correlation_traits_table.csv"),
row.names = FALSE)
