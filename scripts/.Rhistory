arrow = grid::arrow(length = grid::unit(0.02, 'npc')),
show.legend = FALSE
)
# legend and title
if (v==3) {
ggplot_v <- ggplot_v  +
theme(plot.title = element_text(size = 20, color = "#FDE725FF")) +
add_fishape(family = "Acanthuridae",
option = "Naso_unicornis",
xmin =  0.25 ,xmax = 0.35, ymin = -0.20, ymax = -0.35,
fill = "black",
alpha = 1)
} # Check this one, don't know why it's not working
# storing ggplot in list
hab_ggplot[[v]]<-ggplot_v
}# end of v
ggplot_v
# arranging panels
figure4 <-  (temporal_ggplot[[1]] + temporal_ggplot[[2]] + temporal_ggplot[[3]])/
(hab_ggplot[[1]] + hab_ggplot[[2]] + hab_ggplot[[3]])
figure4
# saving as jepg ----
ggsave(figure4, file=here::here("outputs", "Figure4_v2.jpeg"),
height = 25, width = 45, unit = "cm" )
################################################################################
##
## Script for plotting:
##
##  *quality of functional space and relation between traits and PcoAs
##
##  *functional space comparing spatial/temporal data (part of Figure 1)
##
##  *functional space with thermal affinity information (Figure 5)
##
##
## Code by Camille Magneville, Paula Sgarlatta and Sebastien Villeger
##
################################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(patchwork)
library(ggplot2)
library(mFD)
# loading data
load(here::here("data", "funct_spaces.RData") )
load(here::here("data", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
load(here::here("data", "spatial_fd_biomass.RData"))
## Illustrate quality of functional space
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
plot(qual_space)
## Table with mAD values
mAD_values <- funct_spaces$quality_fspaces
### Test correlation between traits and functional axes:
#Change to full traits names
sp_tr <- sp_tr %>%
rename("Maximum reported length" = "Size","Common aggregation" = "Agg",
"Vertical position" = "Position")
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
# get the table of correlation:
corr_table <- as.data.frame(cor_tr_faxes$tr_faxes_stat)  # Table S5
# get the plot:
plot_corr <- cor_tr_faxes$tr_faxes_plot
ggsave(qual_space, file=here::here("outputs", "Figure_qual_space_extra.jpeg"),
height = 20, width = 50, unit = "cm" )
ggsave(plot_corr, file=here::here("outputs", "FigureS6.jpeg"),
height = 16, width = 30, unit = "cm" )
write.csv(corr_table, file=here::here("outputs", "Correlation_traits_table_S5.csv"),
row.names = FALSE)
write.csv(mAD_values, file=here::here("outputs", "mAD_values.csv"),
row.names = FALSE)
##### Functional space comparing spatial/temporal data
#Loading data from both spatial/temporal
species_both <- read.csv(here::here("data", "species_both.csv")) %>%
mutate(type_data= if_else(data_1 == "temporal" & data_2 == "spatial", "both",
if_else(data_1 == "temporal" & data_2 == "no", "temporal","spatial"))) %>%
dplyr::select(-data_1, -data_2)
# Add data type to sp_faxes_coord
sp_3D_coord <- spatial_fd$details$sp_faxes_coord
sp_faxes_coord <- as.data.frame(sp_3D_coord) %>%
rownames_to_column("Species")
sp_faxes_coord <- inner_join(sp_faxes_coord, species_both,
by="Species")
# Change class of data type column: character to factor
sp_faxes_coord$type_data <- as.factor(sp_faxes_coord$type_data)
class(sp_faxes_coord$type_data) # ok
# Create a new assemblage*species df with assemblages being either spatial, temporal or both
asb_sp <- sp_faxes_coord[, c(1, 5)]
asb_sp_new <- asb_sp %>%
add_column(present = as.numeric(1)) %>%
pivot_wider(names_from = type_data, values_from = present)
asb_sp_new[is.na(asb_sp_new)] <- as.numeric(0)
asb_sp_new2 <- t(asb_sp_new)
colnames(asb_sp_new2) <- asb_sp_new2[1, ]
asb_sp_new2 <- asb_sp_new2[-1, ]
# create a dataframe that will contain the same values as asb_sp_new2 because (I don't knwo why)
# I cannot convert character into numeric
asb_sp_new3 <- as.data.frame(matrix(nrow = nrow(asb_sp_new2), ncol = ncol(asb_sp_new2)))#(s)
colnames(asb_sp_new3) <- colnames(asb_sp_new2)
rownames(asb_sp_new3) <- rownames(asb_sp_new2)
for (i in (1:nrow(asb_sp_new3))) {
for (j in (1:ncol(asb_sp_new3))) {
asb_sp_new3[i, j] <- as.numeric(asb_sp_new2[i, j])
}
}
asb_sp_new3 <- as.matrix(asb_sp_new3)
## settings ####
# vertices of all fe in 4D ----
pool_vert_nm <- spatial_fd$details$pool_vert_nm
# range of axes
range_faxes_coord <- range(sp_3D_coord[,1:3])
range_axes <- range_faxes_coord +
c(-1, 1) * (range_faxes_coord[2] - range_faxes_coord[1]) * 0.1
spread_faxes <- range_axes[2] - range_axes[1]
## Compute FRic values ####
# compute FRic for all habitats  ---
Fric <- alpha.fd.multidim(sp_faxes_coord = sp_3D_coord,
asb_sp_w = asb_sp_new3,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
# color code for data type
data_colors <- c(spatial = "#FDE725FF", temporal = "seagreen4", both = "#80471C")
## plotting  ####
# background with axes range set + title
ggplot_z <- background.plot(range_faxes = range_axes,
faxes_nm = c("PC1", "PC2"),
color_bg = "grey95")
# convex hull of global species pool
ggplot_z <- pool.plot(ggplot_bg = ggplot_z,
sp_coord2D = sp_3D_coord,
vertices_nD = pool_vert_nm,
plot_pool = FALSE,
color_ch = "black", fill_ch = "white", alpha_ch = 1)
# get names of assemblages:
pool <- "pool"
plot_asb_nm <- c("spatial", "temporal", "both")
asb1 <- plot_asb_nm[1]
nm_asb <- asb1
asb2 <- plot_asb_nm[2]
nm_asb <- paste(nm_asb, asb2, sep = "_")
asb3 <- plot_asb_nm[3]
nm_asb <- paste(nm_asb, asb3, sep = "_")
sp_asb1 <- names(which(Fric$details$asb_sp_occ[asb1, ] == 1))
sp_asb2 <- names(which(Fric$details$asb_sp_occ[asb2, ] == 1))
sp_asb3 <- names(which(Fric$details$asb_sp_occ[asb3, ] == 1))
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_3D_coord[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- Fric$details$asb_vert_nm[[asb1]]
asb_sp_coord2D_k[["asb2"]] <- sp_3D_coord[sp_asb2, ]
vertices_nD_k[["asb2"]] <- Fric$details$asb_vert_nm[[asb2]]
asb_sp_coord2D_k[["asb3"]] <- sp_3D_coord[sp_asb3, ]
vertices_nD_k[["asb3"]] <- Fric$details$asb_vert_nm[[asb3]]
# plot convex hull of assemblage but not species
ggplot_z2 <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = data_colors,
fill_sp = c(asb1 = "white", asb2 = "white", asb3="white"),
size_sp = c(asb1 = 3, asb2 = 3, asb3=3),
shape_sp = c(asb1 = 16, asb2 = 16, asb=16),
color_vert = data_colors,
fill_vert = data_colors,
size_vert = c(asb1 = 3, asb2 = 3, asb3=3),
shape_vert = c(asb1 = 16, asb2 = 16, asb=16),
alpha_ch = c(asb1 = 0, asb2 = 0, asb3=0),
color_ch = c(asb1 = NA, asb2 = NA, asb3=NA),
fill_ch = c(asb1 = NA, asb2 = NA, asb3=NA))
ggplot_z2
ggsave(ggplot_z2, file=here::here("outputs",  "Figure1b.jpeg"),
height = 16, width = 16, unit = "cm" )
#Loading thermal affinity data
thermal <- read.csv(here::here("data", "raw_data", "thermal_all.csv")) %>%
mutate(thermal_label= if_else(thermal>"23", "tropical", "temperate")) %>%
dplyr::select(-thermal)
# Add thermal aff to sp_faxes_coord
sp_3D_coord <- spatial_fd$details$sp_faxes_coord
sp_faxes_coord <- as.data.frame(sp_3D_coord) %>%
rownames_to_column("Species")
sp_faxes_coord <- inner_join(sp_faxes_coord, thermal,
by="Species")
# Change class of thermal_affinity column: character to factor
sp_faxes_coord$thermal_label <- as.factor(sp_faxes_coord$thermal_label)
class(sp_faxes_coord$thermal_label) # ok
# Create a new assemblage*species df with assemblages being either tropical or temperate
asb_sp <- sp_faxes_coord[, c(1, 5)]
asb_sp_new <- asb_sp %>%
add_column(present = as.numeric(1)) %>%
pivot_wider(names_from = thermal_label, values_from = present)
asb_sp_new[is.na(asb_sp_new)] <- as.numeric(0)
asb_sp_new2 <- t(asb_sp_new)
colnames(asb_sp_new2) <- asb_sp_new2[1, ]
asb_sp_new2 <- asb_sp_new2[-1, ]
# create a dataframe that will contain the same values as asb_sp_new2 because (I don't knwo why)
# I cannot convert character into numeric
asb_sp_new3 <- as.data.frame(matrix(nrow = nrow(asb_sp_new2), ncol = ncol(asb_sp_new2)))#(s)
colnames(asb_sp_new3) <- colnames(asb_sp_new2)
rownames(asb_sp_new3) <- rownames(asb_sp_new2)
for (i in (1:nrow(asb_sp_new3))) {
for (j in (1:ncol(asb_sp_new3))) {
asb_sp_new3[i, j] <- as.numeric(asb_sp_new2[i, j])
}
}
asb_sp_new3 <- as.matrix(asb_sp_new3)
## settings ####
# vertices of all fe in 4D ----
pool_vert_nm <- spatial_fd$details$pool_vert_nm
# range of axes
range_faxes_coord <- range(sp_3D_coord[,1:3])
range_axes <- range_faxes_coord +
c(-1, 1) * (range_faxes_coord[2] - range_faxes_coord[1]) * 0.1
spread_faxes <- range_axes[2] - range_axes[1]
## Compute FRic values ####
# compute FRic for all habitats  ---
Fric <- alpha.fd.multidim(sp_faxes_coord = sp_3D_coord,
asb_sp_w = asb_sp_new3,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
# color code for thermal affinity
thermal_aff_colors <- c(tropical = "firebrick1", temperate = "#2C6BAA")
## plotting  ####
# list to store ggplot
ggplot_pc <- list()
# pairs of axes
pairs_axes <- list(c(1,2), c(1,3), c(2, 3))
for (z in 1:length(pairs_axes)) {
# names of axes
xy <- pairs_axes[[z]]
# background with axes range set + title
ggplot_z <- background.plot(range_faxes = range_axes,
faxes_nm = paste0("PC", xy),
color_bg = "grey95")
# convex hull of global species pool
ggplot_z <- pool.plot(ggplot_bg = ggplot_z,
sp_coord2D = sp_3D_coord[,xy],
vertices_nD = pool_vert_nm,
plot_pool = FALSE,
color_ch = "black", fill_ch = "white", alpha_ch = 1)
# species present in trop:
sp_trop <- sp_faxes_coord$Species[which(sp_faxes_coord$thermal_label == "tropical")]
# species present in temp:
sp_temp <- sp_faxes_coord$Species[which(sp_faxes_coord$thermal_label == "temperate")]
# vertices in trop:
vert_trop <- Fric$details$asb_vert_nm$tropical
# vertices in temp:
vert_temp <- Fric$details$asb_vert_nm$temperate
# plot convex hull of assemblage but not species
ggplot_z2 <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = list(asb1 = sp_3D_coord[sp_trop, xy],
asb2 = sp_3D_coord[sp_temp, xy]),
asb_vertices_nD = list(asb1 = vert_trop,
asb2 = vert_temp),
plot_sp = TRUE,
color_sp = thermal_aff_colors,
fill_sp = c(asb1 = "white", asb2 = "white"),
size_sp = c(asb1 = 3, asb2 = 3),
shape_sp = c(asb1 = 16, asb2 = 16),
color_vert = thermal_aff_colors,
fill_vert = thermal_aff_colors,
size_vert = c(asb1 = 3, asb2 = 3),
shape_vert = c(asb1 = 16, asb2 = 16),
alpha_ch = c(asb1 = 0, asb2 = 0),
color_ch = c(asb1 = NA, asb2 = NA),
fill_ch = c(asb1 = NA, asb2 = NA))
# ggplot stored in list
ggplot_pc[[z]] <- ggplot_z2
}# end of z
## Compute Caption:
# plot white basic window:
plot_caption <- ggplot2::ggplot(data.frame(x = range_axes,
y = range_axes),
ggplot2::aes(x = x, y = y)) +
ggplot2::scale_x_continuous(limits = range_axes, expand = c(0, 0)) +
ggplot2::scale_y_continuous(limits = range_axes, expand = c(0, 0)) +
ggplot2::theme_void() + ggplot2::theme(legend.position = "none") +
ggplot2::geom_rect(xmin = range_axes[1], xmax = range_axes[2],
ymin = range_axes[1], ymax = range_axes[2],
fill = "white", colour ="white")
## merging all plots into a single figure and saving as png ####
figure <- panels.to.patchwork(ggplot_pc, plot_caption = plot_caption)
figure3 <- ggplot_pc [[1]]
figure3
ggsave(figure3, file=here::here("outputs",  "Figure3.jpeg"),
height = 16, width = 16, unit = "cm" )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(dplyr)
library(patchwork)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(ggplot2)
library(ozmaps)
library(cowplot)
library(ggspatial)
library(here)
habitat <- read.csv(here::here("data", "raw_data", "habitat_solitaries_2012.csv"))
habitat_toplot <- habitat %>%
pivot_longer(cols= 4:10, names_to="Group") %>%
filter(Site!="Flat_top", Site!="Look_at_me_now") %>%
mutate(value=as.numeric(value)) %>%
group_by(Site, Habitat,Transect, Group) %>%
summarize(total=sum(value)) %>%
group_by(Site, Transect) %>%
mutate(percent_cover=(total*100/125)) %>% #125 points per transect
dplyr::select(-total)
habitat_summary <-habitat_toplot%>%
group_by(Habitat, Group)%>%
summarise(Percent_cover_habitat=mean(percent_cover,na.rm=T),
n = n(), mean = mean(percent_cover), se = sd(percent_cover/sqrt(n))) %>%
mutate(se) %>%
group_by(Habitat) %>%
arrange(desc(Group)) %>%
mutate(
pos = cumsum(Percent_cover_habitat),
upper = pos + se/2,
lower = pos - se/2
) %>%
ungroup() %>%
filter(mean > 1)
habitat_v3 <- ggplot(habitat_summary, aes(x=Habitat, y=Percent_cover_habitat, fill=Group)) +
geom_bar(stat="identity", width = 0.7, size = 1, color = "black") +
geom_errorbar(aes(ymin = lower, ymax = upper), size = 0.8, width=0.1, position = "identity", color = "black")+
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (18), color = "black"), axis.title = element_text(size= (18)),
legend.key = element_rect(fill = "white"), legend.text = element_text(size=20))+
labs(y="Percent cover (%)", x="") + scale_fill_discrete(name = "",
labels = c("Coral", "Ecklonia radiata", "Macroalgae", "Other invertebrates",
"Rock & sand", "Sponges & tunicates", "Turf & CCA"))
habitat_v3
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(dplyr)
library(patchwork)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(ggplot2)
library(ozmaps)
library(cowplot)
library(ggspatial)
library(here)
habitat <- read.csv(here::here("data", "raw_data", "habitat_solitaries_2012.csv"))
habitat_toplot <- habitat %>%
pivot_longer(cols= 4:10, names_to="Group") %>%
filter(Site!="Flat_top", Site!="Look_at_me_now") %>%
mutate(value=as.numeric(value)) %>%
group_by(Site, Habitat,Transect, Group) %>%
summarize(total=sum(value)) %>%
group_by(Site, Transect) %>%
mutate(percent_cover=(total*100/125)) %>% #125 points per transect
dplyr::select(-total)
habitat_summary <-habitat_toplot%>%
group_by(Habitat, Group)%>%
summarise(Percent_cover_habitat=mean(percent_cover,na.rm=T),
n = n(), mean = mean(percent_cover), se = sd(percent_cover/sqrt(n))) %>%
mutate(se) %>%
group_by(Habitat) %>%
arrange(desc(Group)) %>%
mutate(
pos = cumsum(Percent_cover_habitat),
upper = pos + se/2,
lower = pos - se/2
) %>%
ungroup() %>%
filter(mean > 1)
habitat_v3 <- ggplot(habitat_summary, aes(x=Habitat, y=Percent_cover_habitat, fill=Group)) +
geom_bar(stat="identity", width = 0.7, size = 1, color = "black") +
geom_errorbar(aes(ymin = lower, ymax = upper), size = 0.8, width=0.1, position = "identity", color = "black")+
theme(panel.background=element_rect(fill="white"), panel.grid.minor = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(),axis.line = element_line(size = 1, colour = "black"),
axis.text = element_text(size = (18), color = "black"), axis.title = element_text(size= (18)),
legend.key = element_rect(fill = "white"), legend.text = element_text(size=20))+
labs(y="Percent cover (%)", x="") + scale_fill_discrete(name = "",
labels = c("Coral", "Ecklonia radiata", "Macroalgae", "Other invertebrates",
"Rock & sand", "Sponges & tunicates", "Turf & CCA"))
habitat_v3
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(dplyr)
library(patchwork)
library(sp)
library(rgdal)
library(raster)
library(rgdal)
library(raster)
library(rgeos)
library(ggplot2)
library(ozmaps)
library(cowplot)
library(ggspatial)
library(here)
sites <- read.csv(here::here("data", "raw_data", "sites.csv"))
buffer <- 0.8
geo_bounds <- c(left = min(sites$Longitude)-buffer,
bottom = min(sites$Latitude)-buffer,
right = max(sites$Longitude)+buffer,
top = max(sites$Latitude)+buffer)
min_lon <- 153
max_lon <- 153.5
min_lat <- -30.4
max_lat <- -29.9
geo_bounds <- c(left = min_lon, bottom = min_lat, right = max_lon, top = max_lat)
Sites.grid <- expand.grid(lon_bound = c(geo_bounds[1], geo_bounds[3]),
lat_bound = c(geo_bounds[2], geo_bounds[4]))
coordinates(Sites.grid) <- ~ lon_bound + lat_bound
Aus <- readOGR(dsn = "C:/Users/z5179758/Google Drive/PhD/GitHub/Functional-Diversity_PaulaSgarlatta/data/raw_data/61395_shp/australia",layer = "cstauscd_r")
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
Aus <- readOGR(dsn = "C:/Users/z5179758/Google Drive/PhD/GitHub/Functional-Diversity_PaulaSgarlatta/data/raw_data/61395_shp/australia",layer = "cstauscd_r")
Aus <- readOGR(dsn = "data/raw_data/61395_shp/australia",layer = "cstauscd_r")
Aus <- readOGR(dsn = "data/raw_data/australia",layer = "cstauscd_r")
library(here)
Aus <- readOGR(dsn = "data/raw_data/australia",layer = "cstauscd_r")
Aus <- readOGR(dsn = "C:/Users/Paula Sgarlatta/Google Drive/PhD/GitHub/Functional-Diversity_PaulaSgarlatta/data/raw_data/61395_shp/australia",layer = "cstauscd_r")
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
Aus_crop <- crop(Aus_coast, extent(Sites.grid))
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(dplyr)
library(patchwork)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(ggplot2)
library(ozmaps)
library(cowplot)
library(ggspatial)
library(here)
####### Fig. 1 - Map of study site
sites <- read.csv(here::here("data", "raw_data", "sites.csv"))
buffer <- 0.8
geo_bounds <- c(left = min(sites$Longitude)-buffer,
bottom = min(sites$Latitude)-buffer,
right = max(sites$Longitude)+buffer,
top = max(sites$Latitude)+buffer)
min_lon <- 153
max_lon <- 153.5
min_lat <- -30.4
max_lat <- -29.9
geo_bounds <- c(left = min_lon, bottom = min_lat, right = max_lon, top = max_lat)
Sites.grid <- expand.grid(lon_bound = c(geo_bounds[1], geo_bounds[3]),
lat_bound = c(geo_bounds[2], geo_bounds[4]))
coordinates(Sites.grid) <- ~ lon_bound + lat_bound
Aus <- readOGR(dsn = "C:/Users/Paula Sgarlatta/Google Drive/PhD/GitHub/Functional-Diversity_PaulaSgarlatta/data/raw_data/61395_shp/australia",layer = "cstauscd_r")
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
Aus_crop <- crop(Aus_coast, extent(Sites.grid))
color_data <- c(Inshore= "#482677FF", Midshelf= "#FD6A02",
Offshore="#FDE725FF", Temporal= "seagreen4")
shape_data <- c(Inshore= 19, Midshelf= 19,
Offshore=19, Temporal= 17)
sites_plot <- ggplot()+ theme_classic() +
geom_polygon(data = Aus_crop, aes(x=long, y=lat, group=group), fill="grey", colour="black") +
coord_equal(ratio = 1)+
geom_point(data=sites, aes(x=Longitude, y=Latitude, colour = Habitat,
shape=Habitat, size=2)) +
scale_color_manual(name="Habitat", values=color_data) +
scale_shape_manual(name="Habitat", values=shape_data)+
# annotation_scale(location = "br", plot_unit = "km")+ #width_hint = 0.5) +  #br is the location - bottom, right
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.2, "in"), pad_y = unit(0.3, "in"),
style = north_arrow_fancy_orienteering) +
theme(panel.background = element_rect(fill = "white"),
legend.position = c(0.85,0.3), legend.title = element_blank(),
legend.text = element_text(size=12),
panel.border = element_rect(colour = "black",fill = NA),
axis.text = element_text(size = (14), colour="black"),
axis.title = element_blank()) + scale_size(guide = "none")+
guides(color = guide_legend(override.aes = list(size = 3) ) )+
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
sites_plot
Aus <- ggplot(data = ozmap()) +
geom_sf(color="black", fill= "white") +
geom_rect(xmin = 152, xmax = 154, ymin = -32, ymax = -29,
fill = NA, colour = "black", size = 0.5) +
scale_fill_viridis_d(option = "plasma") +
coord_sf(xlim = c(100.00, 160.00), ylim = c(-45.00, -10.00), expand = TRUE) +
theme_void()
map <- ggdraw(sites_plot) +
draw_plot(Aus, x = 0.10, y = 0.65, width = 0.4, height = 0.4)
map
ggsave(map, file=here::here("outputs", "Figure1_CHECK.jpeg"),
height = 20, width = 18, unit = "cm")
ggsave(map, file=here::here("outputs", "Figure1.jpeg"),
height = 20, width = 18, unit = "cm")
