# list to store ggplot
ggplot_midshelf <- list()
for (z in (1:plot_nb)) {
# names of axes
xy_z <- axes_plot[1:2, z]
# get species coordinates along the 2 axes:
sp_coord_xy <- as.matrix(sp_faxes_coord_plot[, xy_z])
colnames(sp_coord_xy) <- c("x", "y")
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_coord_xy[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- fd_details$asb_vert_nm[[asb1]]
asb_sp_coord2D_k[["asb2"]] <- sp_coord_xy[sp_asb2, ]
vertices_nD_k[["asb2"]] <- fd_details$asb_vert_nm[[asb2]]
# plot convex hull of assemblage but not species
ggplot_z_midshelf <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = thermal_aff_colors,
fill_sp = c(asb1 = "white", asb2 = "white"),
size_sp = c(asb1 = 1, asb2 = 1),
shape_sp = c(asb1 = 16, asb2 = 16),
color_vert = thermal_aff_colors,
fill_vert = thermal_aff_colors,
size_vert = c(asb1 = 4, asb2 = 4),
shape_vert = c(asb1 = 16, asb2 = 16),
alpha_ch = c(asb1 = 0, asb2 = 0),
color_ch = c(asb1 = "lightsalmon1", asb2 =NA),
fill_ch = c(asb1 = NA, asb2 = NA))
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_midshelf <- ggplot_z_midshelf +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_midshelf <- ggplot_z_midshelf  + labs(title = "Midshelf" )+
theme(plot.title = element_text(size = 20, color = "lightsalmon1"))
}
# ggplot stored in list
ggplot_midshelf[[z]] <- ggplot_z_midshelf
}# end of z
ggplot_z_midshelf
plot_sp_nm <- c("Aulostomus_chinensis",  "Halichoeres_margaritaceus",
"Siganus_fuscescens", "Stegastes_apicalis",
"Thalassoma_lunare","Thalassoma_lutescens",
"Achoerodus_viridis", "Kyphosus_sydneyanus",
"Parma_unifasciata", "Pempheris_affinis",
"Scorpis_lineolata")
# give faxes identity if faxes set to NULL:
if (is.null(faxes)) {
faxes <- colnames(sp_faxes_coord)[1:min(c(4, nb_dim))]
}
# give faxes names if faxes set to NULL:
if (is.null(faxes_nm)) {
faxes_nm <- faxes
}
names(faxes_nm) <- faxes
# get number of axes:
nb_faxes <- length(faxes)
# get combinations of axes on plot:
axes_plot <- utils::combn(faxes, 2)
plot_nb   <- ncol(axes_plot)
# set range of axes if c(NA, NA):
if (is.na(range_faxes[1]) && is.na(range_faxes[2])) {
range_sp_coord  <- range(sp_faxes_coord)
range_faxes <- range_sp_coord +
c(-1, 1) * (range_sp_coord[2] - range_sp_coord[1]) * 0.1
}
# create a dataframe with species coordinates and option (vertices + label)
sp_faxes_coord_plot <- data.frame(sp_faxes_coord, label = "")
if (! is.null(plot_sp_nm)) {
sp_faxes_coord_plot[plot_sp_nm, "label"] <- plot_sp_nm
}
# get vertices of the convex hull of the species pool:
vert_pool <- fd_details$pool_vert_nm
# get names of assemblages:
pool <- "pool"
asb1 <- plot_asb_nm[1]
nm_asb <- asb1
asb2 <- plot_asb_nm[2]
nm_asb <- paste(nm_asb, asb2, sep = "_")
sp_asb1 <- names(which(fd_details$asb_sp_occ[asb1, ] == 1))
sp_asb2 <- names(which(fd_details$asb_sp_occ[asb2, ] == 1))
# list to store ggplot
ggplot_midshelf <- list()
for (z in (1:plot_nb)) {
# names of axes
xy_z <- axes_plot[1:2, z]
# get species coordinates along the 2 axes:
sp_coord_xy <- as.matrix(sp_faxes_coord_plot[, xy_z])
colnames(sp_coord_xy) <- c("x", "y")
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_coord_xy[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- fd_details$asb_vert_nm[[asb1]]
asb_sp_coord2D_k[["asb2"]] <- sp_coord_xy[sp_asb2, ]
vertices_nD_k[["asb2"]] <- fd_details$asb_vert_nm[[asb2]]
# plot convex hull of assemblage but not species
ggplot_z_midshelf <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = thermal_aff_colors,
fill_sp = c(asb1 = "white", asb2 = "white"),
size_sp = c(asb1 = 1, asb2 = 1),
shape_sp = c(asb1 = 16, asb2 = 16),
color_vert = thermal_aff_colors,
fill_vert = thermal_aff_colors,
size_vert = c(asb1 = 4, asb2 = 4),
shape_vert = c(asb1 = 16, asb2 = 16),
alpha_ch = c(asb1 = 0, asb2 = 0),
color_ch = c(asb1 = "lightsalmon1", asb2 =NA),
fill_ch = c(asb1 = NA, asb2 = NA))
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_midshelf <- ggplot_z_midshelf +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_midshelf <- ggplot_z_midshelf  + labs(title = "Midshelf" )+
theme(plot.title = element_text(size = 20, color = "lightsalmon1"))
}
# ggplot stored in list
ggplot_midshelf[[z]] <- ggplot_z_midshelf
}# end of z
# compute FRic for all habitats  ---
Fric_inshore <- alpha.fd.multidim(sp_faxes_coord = sp_2d_coord,
asb_sp_w = inshore_occ_thermal,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
inshore_occ <- hab_sp_occ %>% # I'm sure there is an easier way to do this...
as.data.frame() %>%
rownames_to_column("Sites") %>%
filter(Sites == "Inshore") %>%
column_to_rownames("Sites") %>%
as.matrix()
inshore_occ_2 <- inshore_occ %>%
as.data.frame() %>%
gather(Species, Abundance, 1:53)
add_thermal <- left_join(inshore_occ_2, thermal, by= "Species")
inshore_occ_thermal <- add_thermal %>%
spread(Species, Abundance, fill=0) %>%
column_to_rownames("thermal_label") %>%
as.matrix()
sp_filter_inshore <- mFD::sp.filter(asb_nm          = c("Inshore"),
sp_faxes_coord = sp_3D_coord,
asb_sp_w       = hab_sp_occ)
sp_2d_coord_final_inshore <- sp_filter_inshore$`species coordinates`[, c("PC1", "PC2")]
sp_thermal_inshore <- sp_2d_coord_final_inshore %>%
as.data.frame() %>%
rownames_to_column("Species") %>%
left_join(add_thermal, by="Species")
# compute FRic for all habitats  ---
Fric_inshore <- alpha.fd.multidim(sp_faxes_coord = sp_2d_coord,
asb_sp_w = inshore_occ,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
# list to store ggplot
ggplot_inshore <- list()
# pairs of axes
pairs_axes <- list( c(1,2) )
for (z in 1:length(pairs_axes)) {
# names of axes
xy <- pairs_axes[[z]]
# species present in trop:
#sp_trop_inshore <- sp_thermal_inshore$Species[which(sp_thermal_inshore$thermal_label == "tropical")]
# species present in temp:
#sp_temp_inshore <- sp_thermal_inshore$Species[which(sp_thermal_inshore$thermal_label == "temperate")]
# vertices in trop:
#vert_trop_inshore <- Fric_inshore$details$asb_vert_nm$tropical
# vertices in temp:
#vert_temp_inshore <- Fric_inshore$details$asb_vert_nm$temperate
# vertices
vert_inshore <- Fric_inshore$details$asb_vert_nm$Inshore
# plot convex hull of assemblage but not species
ggplot_z_inshore <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = list("Inshore" = sp_2d_coord_final_inshore),
asb_vertices_nD = list("Inshore"= vert_inshore),
plot_sp = TRUE,
color_sp = c("Inshore" = "#2C6BAA"),
fill_sp = c("Inshore"= "white"),
size_sp = c("Inshore" = 1),
shape_sp = c("Inshore" = 16),
color_vert = c("Inshore" = "#2C6BAA"),
fill_vert = c("Inshore" = "#2C6BAA"),
size_vert = c("Inshore"= 4),
shape_vert = c("Inshore" = 16),
alpha_ch = c("Inshore" = 0),
color_ch = c("Inshore" = "#2C6BAA"),
fill_ch = c("Inshore" = NA))
# legend and title
if (z==1) {
ggplot_z_inshore <- ggplot_z_inshore  + labs(title = "Inshore" )+
theme(plot.title = element_text(size = 20, color = "#2C6BAA"))
}
# ggplot stored in list
ggplot_inshore[[z]] <- ggplot_z_inshore
}# end of z
ggplot_z_inshore
inshore_occ <- hab_sp_occ %>% # I'm sure there is an easier way to do this...
as.data.frame() %>%
rownames_to_column("Sites") %>%
filter(Sites == "Inshore") %>%
column_to_rownames("Sites") %>%
as.matrix()
inshore_occ_2 <- inshore_occ %>%
as.data.frame() %>%
gather(Species, Abundance, 1:53)
add_thermal <- left_join(inshore_occ_2, thermal, by= "Species")
inshore_occ_thermal <- add_thermal %>%
spread(Species, Abundance, fill=0) %>%
column_to_rownames("thermal_label") %>%
as.matrix()
sp_filter_inshore <- mFD::sp.filter(asb_nm          = c("Inshore"),
sp_faxes_coord = sp_3D_coord,
asb_sp_w       = hab_sp_occ)
sp_2d_coord_final_inshore <- sp_filter_inshore$`species coordinates`[, c("PC1", "PC2")]
sp_thermal_inshore <- sp_2d_coord_final_inshore %>%
as.data.frame() %>%
rownames_to_column("Species") %>%
left_join(add_thermal, by="Species")
# compute FRic for all habitats  ---
Fric_inshore <- alpha.fd.multidim(sp_faxes_coord = sp_2d_coord,
asb_sp_w = inshore_occ,
ind_vect = c("fric"),
scaling = TRUE,
details_returned = TRUE)
## retrieve names of main input:
asb_fd_ind <- Fric_inshore$functional_diversity_indices
fd_details <- Fric_inshore$details
View(asb_fd_ind)
## get coordinates of species:
sp_faxes_coord <- fd_details$sp_faxes_coord
## get number of dimensions in input:
nb_dim <- ncol(sp_faxes_coord)
# vertices
vert <- Fric_inshore$details$asb_vert_nm$Inshore
vert
faxes               = NULL
faxes_nm            = NULL
range_faxes         = c(NA, NA)
plot_asb_nm <- c("Inshore")
plot_sp_nm <- c( "Austrolabrus_maculatus", "Achoerodus_viridis" ,
"Girella_elevata","Pempheris_affinis",
"Parma_oligolepis", "Scorpis_lineolata")
## retrieve names of main input:
asb_fd_ind <- Fric_inshore$functional_diversity_indices
fd_details <- Fric_inshore$details
## get coordinates of species:
sp_faxes_coord <- fd_details$sp_faxes_coord
## get number of dimensions in input:
nb_dim <- ncol(sp_faxes_coord)
# vertices
vert <- Fric_inshore$details$asb_vert_nm$Inshore
vert
faxes               = NULL
faxes_nm            = NULL
range_faxes         = c(NA, NA)
plot_asb_nm <- c("Inshore")
plot_sp_nm <- c( "Austrolabrus_maculatus", "Achoerodus_viridis" ,
"Girella_elevata","Pempheris_affinis",
"Parma_oligolepis", "Scorpis_lineolata")
# give faxes identity if faxes set to NULL:
if (is.null(faxes)) {
faxes <- colnames(sp_faxes_coord)[1:min(c(4, nb_dim))]
}
# give faxes names if faxes set to NULL:
if (is.null(faxes_nm)) {
faxes_nm <- faxes
}
names(faxes_nm) <- faxes
# get number of axes:
nb_faxes <- length(faxes)
# get combinations of axes on plot:
axes_plot <- utils::combn(faxes, 2)
plot_nb   <- ncol(axes_plot)
# set range of axes if c(NA, NA):
if (is.na(range_faxes[1]) && is.na(range_faxes[2])) {
range_sp_coord  <- range(sp_faxes_coord)
range_faxes <- range_sp_coord +
c(-1, 1) * (range_sp_coord[2] - range_sp_coord[1]) * 0.1
}
# create a dataframe with species coordinates and option (vertices + label)
sp_faxes_coord_plot <- data.frame(sp_faxes_coord, label = "")
if (! is.null(plot_sp_nm)) {
sp_faxes_coord_plot[plot_sp_nm, "label"] <- plot_sp_nm
}
# get vertices of the convex hull of the species pool:
vert_pool <- fd_details$pool_vert_nm
# get names of assemblages:
pool <- "pool"
asb1 <- plot_asb_nm[1]
nm_asb <- asb1
sp_asb1 <- names(which(fd_details$asb_sp_occ[asb1, ] == 1))
# list to store ggplot
ggplot_inshore <- list()
for (z in (1:plot_nb)) {
# names of axes
xy_z <- axes_plot[1:2, z]
# get species coordinates along the 2 axes:
sp_coord_xy <- as.matrix(sp_faxes_coord_plot[, xy_z])
colnames(sp_coord_xy) <- c("x", "y")
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_coord_xy[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- fd_details$asb_vert_nm[[asb1]]
# plot convex hull of assemblage but not species
ggplot_z_inshore <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = c(asb1 = "#2C6BAA"),
fill_sp = c(asb1 = "white"),
size_sp = c(asb1 = 1),
shape_sp = c(asb1 = 16),
color_vert = c(asb1 = "#2C6BAA"),
fill_vert = c(asb1 = "#2C6BAA"),
size_vert = c(asb1 = 4),
shape_vert = c(asb1 = 16),
alpha_ch = c(asb1 = 0),
color_ch = c(asb1 = "#2C6BAA"),
fill_ch = c(asb1 = NA))
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_inshore <- ggplot_z_inshore +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_inshore <- ggplot_z_inshore  + labs(title = "Inshore" )+
theme(plot.title = element_text(size = 20, color = "#00C19A"))
}
# ggplot stored in list
ggplot_inshore[[z]] <- ggplot_z_inshore
}# end of z
ggplot_z_inshore
# plot convex hull of assemblage but not species
ggplot_z_inshore <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = c(asb1 = "#2C6BAA"),
fill_sp = c(asb1 = "white"),
size_sp = c(asb1 = 1),
shape_sp = c(asb1 = 16),
color_vert = c(asb1 = "#2C6BAA"),
fill_vert = c(asb1 = "#2C6BAA"),
size_vert = c(asb1 = 4),
shape_vert = c(asb1 = 16),
alpha_ch = c(asb1 = 0),
color_ch = c(asb1 = "#2C6BAA"),
fill_ch = c(asb1 = NA))
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_inshore <- ggplot_z_inshore +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_inshore <- ggplot_z_inshore  + labs(title = "Inshore" )+
theme(plot.title = element_text(size = 20, color = "#2C6BAA"))
}
# ggplot stored in list
ggplot_inshore[[z]] <- ggplot_z_inshore
for (z in (1:plot_nb)) {
# names of axes
xy_z <- axes_plot[1:2, z]
# get species coordinates along the 2 axes:
sp_coord_xy <- as.matrix(sp_faxes_coord_plot[, xy_z])
colnames(sp_coord_xy) <- c("x", "y")
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_coord_xy[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- fd_details$asb_vert_nm[[asb1]]
# plot convex hull of assemblage but not species
ggplot_z_inshore <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = c(asb1 = "#2C6BAA"),
fill_sp = c(asb1 = "white"),
size_sp = c(asb1 = 1),
shape_sp = c(asb1 = 16),
color_vert = c(asb1 = "#2C6BAA"),
fill_vert = c(asb1 = "#2C6BAA"),
size_vert = c(asb1 = 4),
shape_vert = c(asb1 = 16),
alpha_ch = c(asb1 = 0),
color_ch = c(asb1 = "#2C6BAA"),
fill_ch = c(asb1 = NA))
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_inshore <- ggplot_z_inshore +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_inshore <- ggplot_z_inshore  + labs(title = "Inshore" )+
theme(plot.title = element_text(size = 20, color = "#2C6BAA"))
}
# ggplot stored in list
ggplot_inshore[[z]] <- ggplot_z_inshore
}# end of z
figure9 <- ( ggplot_2002[[1]] + ggplot_2009[[1]] +  ggplot_2018[[1]] )/
( ggplot_inshore[[1]]  + ggplot_midshelf[[1]] +  ggplot_offshore[[1]] )
figure9
ggplot_2002[[1]]
ggplot_2009[[1]]
ggplot_2018[[1]]
ggplot_inshore[[1]]
ggplot_midshelf[[1]]
ggplot_offshore[[1]]
( ggplot_2002[[1]] + ggplot_2009[[1]] +  ggplot_2018[[1]] )
figure9 <- ( ggplot_inshore[[1]] + ggplot_2002[[1]])/
(ggplot_midshelf[[1]] + ggplot_2009[[1]])/
(ggplot_2018[[1]] +  ggplot_offshore[[1]] )
figure9
ggplot_inshore[[1]] + ggplot_2002[[1]])
( ggplot_inshore[[1]] + ggplot_2002[[1]])
figure9 <- ggarrange(ggplot_inshore[[1]], ggplot_2002[[1]],
ggplot_midshelf[[1]], ggplot_2009[[1]],
ggplot_2018[[1]], ggplot_offshore[[1]],
ncol = 2, nrow = 3)
library(ggpubr)
figure9 <- ggarrange(ggplot_inshore[[1]], ggplot_2002[[1]],
ggplot_midshelf[[1]], ggplot_2009[[1]],
ggplot_2018[[1]], ggplot_offshore[[1]],
ncol = 2, nrow = 3)
figure9
ggplot_inshore[[1]] + ggplot_2002[[1]])
( ggplot_inshore[[1]] + ggplot_2002[[1]])
figure9A <- (ggplot_2002[[1]] + ggplot_2009[[1]] + ggplot_2018[[1]])
figure9A
figure9B <-(ggplot_inshore[[1]] + ggplot_midshelf[[1]] + ggplot_offshore[[1]])
figure9B
Bare_Bluff <- read.csv("/Users/z5179758/Google Drive/PhD/Tropicalisation project/PQ/Bare_Bluff.csv")
library(here)
Bare_Bluff <- read.csv("/Users/z5179758/Google Drive/PhD/Tropicalisation project/PQ/Bare_Bluff.csv")
