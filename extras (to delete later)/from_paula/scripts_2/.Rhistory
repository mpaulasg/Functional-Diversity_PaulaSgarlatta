}
# give faxes names if faxes set to NULL:
if (is.null(faxes_nm)) {
faxes_nm <- faxes
}
names(faxes_nm) <- faxes
# get number of axes:
nb_faxes <- length(faxes)
# get combinations of axes on plot:
axes_plot <- utils::combn(faxes, 2)
plot_nb   <- ncol(axes_plot)
# set range of axes if c(NA, NA):
if (is.na(range_faxes[1]) && is.na(range_faxes[2])) {
range_sp_coord  <- range(sp_faxes_coord)
range_faxes <- range_sp_coord +
c(-1, 1) * (range_sp_coord[2] - range_sp_coord[1]) * 0.1
}
# create a dataframe with species coordinates and option (vertices + label)
sp_faxes_coord_plot <- data.frame(sp_faxes_coord, label = "")
if (! is.null(plot_sp_nm)) {
sp_faxes_coord_plot[plot_sp_nm, "label"] <- plot_sp_nm
}
# get vertices of the convex hull of the species pool:
vert_pool <- fd_details$pool_vert_nm
# get names of assemblages:
pool <- "pool"
asb1 <- plot_asb_nm[1]
nm_asb <- asb1
asb2 <- plot_asb_nm[2]
nm_asb <- paste(nm_asb, asb2, sep = "_")
sp_asb1 <- names(which(fd_details$asb_sp_occ[asb1, ] == 1))
sp_asb2 <- names(which(fd_details$asb_sp_occ[asb2, ] == 1))
# list to store ggplot
ggplot_offshore <- list()
for (z in (1:plot_nb)) {
# names of axes
xy_z <- axes_plot[1:2, z]
# get species coordinates along the 2 axes:
sp_coord_xy <- as.matrix(sp_faxes_coord_plot[, xy_z])
colnames(sp_coord_xy) <- c("x", "y")
# list with dataframes for plot:
asb_sp_coord2D_k <- list()
asb_sp_coord2D_k[["asb1"]] <- sp_coord_xy[sp_asb1, ]
vertices_nD_k <- list()
vertices_nD_k[["asb1"]] <- fd_details$asb_vert_nm[[asb1]]
asb_sp_coord2D_k[["asb2"]] <- sp_coord_xy[sp_asb2, ]
vertices_nD_k[["asb2"]] <- fd_details$asb_vert_nm[[asb2]]
# plot convex hull of assemblage but not species
ggplot_z_offshore <-fric.plot(ggplot_bg = ggplot_z,
asb_sp_coord2D = asb_sp_coord2D_k,
asb_vertices_nD = vertices_nD_k,
plot_sp = TRUE,
color_sp = thermal_aff_colors,
fill_sp = c(asb1 = "white", asb2 = "white"),
size_sp = c(asb1 = 1, asb2 = 1),
shape_sp = c(asb1 = 16, asb2 = 16),
color_vert = thermal_aff_colors,
fill_vert = thermal_aff_colors,
size_vert = c(asb1 = 4, asb2 = 4),
shape_vert = c(asb1 = 16, asb2 = 16),
alpha_ch = c(asb1 = 0, asb2 = 0),
color_ch = c(asb1 = "#00C19A", asb2 =NA),
fill_ch = c(asb1 = NA, asb2 = NA))
# legend and title
if (z==1) {
ggplot_z_offshore <- ggplot_z_offshore  + labs(title = "offshore" )+
theme(plot.title = element_text(size = 20, color = "#00C19A"))
}
# add species names if needed:
if (! is.null(plot_sp_nm)) {
x <- NULL
y <- NULL
ggplot_z_offshore <- ggplot_z_offshore +
ggrepel::geom_text_repel(data = sp_faxes_coord_plot,
ggplot2::aes_string(x = xy_z[1],
y = xy_z[2],
label = "label"),
size = 3, colour= "black",
fontface = "plain",
max.overlaps = Inf,
box.padding = grid::unit(2, 'lines'),
force = 5,
arrow = grid::arrow(length = grid::unit(0.02,
'npc')),
segment.color = "black")
}
# legend and title
if (z==1) {
ggplot_z_offshore <- ggplot_z_offshore  + labs(title = "offshore" )+
theme(plot.title = element_text(size = 20, color = "#00C19A"))
}
# ggplot stored in list
ggplot_offshore[[z]] <- ggplot_z_offshore
}# end of z
ggplot_z_offshore
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(mFD)
library(here)
library(ggplot2)
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
################################################################################
##
## Script for computing species positions in a multidimensional space
## according to their trait values
##
## Code by Camille Magneville, SÃ©bastien VillÃ©ger and Paula Sgarlatta
##
################################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
## loading ####
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 119 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
## preparing trait dataset ####
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 119 species
# recoding variable to match trait type ----
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
#Kmax as numeric
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
### Compute functional spaces and their quality:
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces$quality_fspaces
View(funct_spaces)
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces$quality_fspaces
sp_faxes_coord <- funct_spaces$details_fspaces$sp_pc_coord
View(sp_faxes_coord)
save(sp_faxes_coord, file=here::here("outputs/", "sp_faxes_coord.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
plot(qual_space)
plot(qual_space)
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
corr_table <- as.data.frame(cor_tr_faxes$tr_faxes_stat)
plot_corr <- cor_tr_faxes$tr_faxes_plot
plot_corr
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
View(fish_traits)
################################################################################
##
## Script for preparing fish occurrence datasets
##
## Code by Camille Magneville, SÃ©bastien villÃ©ger and Paula Sgarlatta
##
################################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(dplyr)
## temporal survey data ####
# loading raw data from csv----
# metadata and data from sites that use to have kelp and lost it:
kelp_metadata <- read.csv(here::here("data", "raw_data", "TemporalBRUV_kelp_metadata.csv") )
head(kelp_metadata)
unique(kelp_metadata$Site) # 5 sites
unique(kelp_metadata$Year) # 14 years
kelp_sp_maxN <- read.csv(here::here("data", "raw_data", "TemporalBRUV_kelp_species.csv") ) %>%
column_to_rownames("Code") %>%
as.matrix()
head(kelp_sp_maxN)
### Joining both datasets
kelp <- read.csv(here::here("data", "raw_data", "TemporalBRUV_kelp_species.csv") )
# summary of surveys and occurrences data ----
kelp_summary <- mFD::asb.sp.summary(asb_sp_w = kelp_sp_maxN)
# retrieve occurrence matrix:
kelp_sp_occ <- kelp_summary$asb_sp_occ
# dimensions
dim(kelp_sp_occ) # 69 assemblages * 101 species
# names of species
kelp_sp <- colnames(kelp_sp_occ)
length(kelp_sp) # 101 sp
############## => temporal data ready ####
## spatial survey data ####
# metadata of surveys and fish biomass (average across UVC transects) ----
spatial_metadata <- read.csv(here::here("data", "raw_data",  "SpatialUVC_metadata_site.csv"))
head(spatial_metadata)
spatial_sp_biom <- read.csv(here::here("data", "raw_data", "SpatialUVC_species_biomass_site_average.csv")) %>%
column_to_rownames("Code") %>%
as.matrix()
dim(spatial_sp_biom) # 9 assemblages * 53 species
# summary of surveys and occurrences data ----
spatial_summary <- mFD::asb.sp.summary(asb_sp_w = spatial_sp_biom)
# retrieve occurrence matrix:
spatial_sp_occ <- spatial_summary$asb_sp_occ
# species names
spatial_sp <- colnames(spatial_sp_occ)
length(spatial_sp) # 53
## names of species present in at least one dataset ####
sum(spatial_sp %in% kelp_sp)# 35 species shared
species_allsurveys <- unique( c(kelp_sp ,  spatial_sp) )
length(species_allsurveys) # 119 species
## saving dataframes #####
save(kelp_metadata, file=here::here("data", "kelp_metadata.RData") )
save(kelp_sp_occ, file=here::here("data", "kelp_sp_occ.RData") )
save(kelp_summary, file=here::here("data", "kelp_summary.RData") )
save(spatial_metadata, file=here::here("data", "spatial_metadata.RData") )
save(spatial_sp_occ, file=here::here("data", "spatial_sp_occ.RData") )
save(spatial_summary, file=here::here("data", "spatial_summary.RData") )
save(species_allsurveys, file=here::here("data", "species_allsurveys.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
## loading ####
# load traits data ----
fish_traits <- read.csv(here::here("data", "raw_data", "fish_traits.csv"), header = T)
# load species names from surveys datasets ----
load(here::here("data", "species_allsurveys.RData") )
length(species_allsurveys) # 119 species
# checking same species in trait and occurrences datasets ----
identical ( sort(species_allsurveys) , sort(fish_traits$Species ) ) # True
## preparing trait dataset ####
# trait values in a dataframe (species in alphabetical order) ----
sp_tr <- fish_traits %>%
arrange("Species") %>%
column_to_rownames("Species") %>%
as.data.frame()
head(sp_tr)
nrow(sp_tr) # 119 species
# recoding variable to match trait type ----
# looking at trait values
lapply(sp_tr, unique)
# trait type
tr_cat<-data.frame( trait_name = c("Size", "Agg", "Position", "Diet", "Kmax"),
trait_type = c("O","O","O", "N", "Q") )
# size as ordinal
sp_tr$Size <- factor(sp_tr$Size,
levels = c("S1", "S2", "S3", "S4", "S5", "S6"),
ordered = TRUE)
summary(sp_tr$Size)
# aggregation as ordinal
sp_tr$Agg <- factor(sp_tr$Agg,
levels = c("Solitary", "Pair", "Group"),
ordered = TRUE)
summary(sp_tr$Agg)
# Position as ordinal
sp_tr$Position <- factor(sp_tr$Position,
levels = c("Benthic", "BenthoP", "Pelagic"),
ordered = TRUE)
summary(sp_tr$Position)
# diet as factor
sp_tr$Diet <- as.factor(sp_tr$Diet)
summary(sp_tr$Diet)
#Kmax as numeric
sp_tr$Kmax <- as.numeric(sp_tr$Kmax)
summary(sp_tr$Kmax)
# summary of trait data----
summary_traits <- mFD::sp.tr.summary(tr_cat = tr_cat,
sp_tr  = sp_tr)
## Computing Gower distance between species ####
sp_gower_dist <- mFD::funct.dist(sp_tr=sp_tr, tr_cat = tr_cat,
metric="gower")
# => no need to compute FE since all indices are not sensitive to redundant species
range(sp_gower_dist) # from 0 to 1
### Compute functional spaces and their quality:
# mean absolute deviation index (as quality metric)
funct_spaces<- mFD::quality.fspaces(sp_dist = sp_gower_dist, maxdim_pcoa = 12,
deviation_weighting = "absolute", fdist_scaling = FALSE,
fdendro = "average")
funct_spaces
sp_faxes_coord <- funct_spaces$details_fspaces$sp_pc_coord
# => 3D space has the lowest mAD (0.055)
# species coordinates
sp_3D_coord<-funct_spaces$details_fspaces$sp_pc_coord[,1:3]
summary(sp_3D_coord)
#see variance explained by the PCoA axes
gower<-funct_spaces$details_deviation ## CHECK
# saving ####
# trait values and trait coding dataframes ----
save(sp_tr, file=here::here("data/", "sp_tr.RData") )
save(tr_cat, file=here::here("data/", "tr_cat.RData") )
save(summary_traits, file=here::here("outputs/", "summary_traits.RData") )
save(sp_gower_dist, file=here::here("outputs/", "sp_gower_dist.RData") )
save(sp_3D_coord, file=here::here("outputs/", "sp_3D_coord.RData") )
save(funct_spaces, file=here::here("outputs/", "funct_spaces.RData") )
save(sp_faxes_coord, file=here::here("outputs/", "sp_faxes_coord.RData") )
##################################  end of code ######################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
# loading data
load(here::here("data", "kelp_sp_occ.RData") )
load(here::here("outputs", "sp_3D_coord.RData") )
load(here::here("data", "spatial_sp_occ.RData") )
temporal_fd_kelp <- mFD::alpha.fd.multidim(
sp_faxes_coord   = sp_3D_coord,
asb_sp_w         = kelp_sp_occ,
ind_vect         = c("fide", "fric", "fdis"),
scaling          = TRUE,
check_input      = TRUE,
details_returned = TRUE)
temporal_alpha_kelp <- temporal_fd_kelp$functional_diversity_indices
spatial_fd <- mFD::alpha.fd.multidim(
sp_faxes_coord   = sp_3D_coord,
asb_sp_w         = spatial_sp_occ,
ind_vect         = c("fide", "fric", "fdis"),
scaling          = TRUE,
check_input      = TRUE,
details_returned = TRUE)
spatial_alpha <- spatial_fd$functional_diversity_indices
View(spatial_alpha)
save(temporal_fd_kelp, file=here::here("outputs/", "temporal_fd_kelp.RData") )
save(temporal_alpha_kelp, file=here::here("outputs/", "temporal_alpha_kelp.RData") )
save(spatial_fd, file=here::here("outputs/", "spatial_fd.RData") )
save(spatial_alpha, file=here::here("outputs/", "spatial_alpha.RData") )
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
plot(qual_space)
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
corr_table <- as.data.frame(cor_tr_faxes$tr_faxes_stat)
View(corr_table)
plot_corr <- cor_tr_faxes$tr_faxes_plot
plot_corr
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 16, width = 30, unit = "cm" )
ggsave(plot_corr, file=here::here("outputs/", "Figure5S_March.png"),
height = 16, width = 30, unit = "cm" )
write.csv(corr_table, file=here::here("outputs/", "Correlation_traits_table_March.csv"),
row.names = FALSE)
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 20, width = 30, unit = "cm" )
################################################################################
##
## Script for plotting quality of functional space and relation between traits and
##
## PcoAs
##
## Code by Paula Sgarlatta, Camille Magneville and Sebastien Villeger
##
################################################################################
rm(list=ls()) # cleaning memory
# libraries
library(tidyverse)
library(here)
library(mFD)
library(ggplot2)
## loading ####
load(here::here("outputs", "funct_spaces.RData") )
load(here::here("outputs", "sp_faxes_coord.RData") )
load(here::here("data", "sp_tr.RData") )
# illustrate quality of functional space
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
plot(qual_space)
### Test correlation between traits and functional axes:
cor_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = sp_tr,
sp_faxes_coord = sp_faxes_coord[, c("PC1", "PC2", "PC3")],
plot           = TRUE)
# get the table of correlation:
corr_table <- as.data.frame(cor_tr_faxes$tr_faxes_stat)
# get the plot:
plot_corr <- cor_tr_faxes$tr_faxes_plot
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 20, width = 30, unit = "cm" )
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 30, width = 40, unit = "cm" )
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 20, width = 50, unit = "cm" )
qual_space <- mFD::quality.fspaces.plot(
fspaces_quality            = funct_spaces,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
plot(qual_space)
ggsave(qual_space, file=here::here("outputs/", "Figure4S_March.png"),
height = 20, width = 50, unit = "cm" )
plot(qual_space)
